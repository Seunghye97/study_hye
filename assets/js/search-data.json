{
  
    
        "post0": {
            "title": "모듈과 패키지",
            "content": ". &#47784;&#46280;&#47564;&#46308;&#44592; . from google.colab import drive drive.mount(&#39;/content/drive&#39;) . % cd /content/drive/MyDrive/1.sba파이썬교육/colab1 . import mycalc p = mycalc.get_plus(2,2) m = mycalc.get_plus(3,2) print(p,m) . import mycalc as cal p = cal.get_plus(2,2) m = cal.get_minus(3,2) print(p,m) . from mycalc import get_plus p = get_plus(2,2) m = cal.get_minus(3,2) print(p,m) . from mycalc import get_plus,get_minus p = get_plus(2,2) m = get_minus(3,2) print(p,m) . from mycalc import * p = get_plus(2,2) m = get_minus(3,2) print(p,m) . &#54056;&#53412;&#51648; . 패키지(Packages)는 도트(.)를 사용하여 파이썬 모듈을 계층적(디렉터리 구조)으로 관리할 수 있게 해줍니다. . 패키지명.디렉토리명.모듈명 . &#53364;&#47000;&#49828; . &#53364;&#47000;&#49828;&#51032; &#49324;&#50857; . result1 = 0 result2 = 0 def add1(num): global result1 result1 += num return result1 def add2(num): global result2 result2 += num return result2 print(add1(3)) print(add1(4)) print(add2(3)) print(add2(7)) . class Calculator: def __init__(self): self.result = 0 def add(self, num): self.result += num return self.result cal1 = Calculator() cal2 = Calculator() print(cal1.add(3)) print(cal1.add(4)) print(cal2.add(3)) print(cal2.add(7)) . class Calculator: def __init__(self): self.result = 0 def add(self, num): self.result += num return self.result def sub(self, num): self.result -= num return self.result cal1 = Calculator() cal2 = Calculator() cal3 = Calculator() print(cal1.add(3)) print(cal2.add(4)) print(cal3.sub(3)) . &#51088;&#46041;&#52264; &#53364;&#47000;&#49828; &#47564;&#46308;&#44592; . class Car: brand = &#39;&#39; model = &#39;&#39; color = &#39;&#39; def turn_on(self): print(&#39;시동을 겁니다&#39;) def turn_off(self): print(&#39;시동을 끕니다&#39;) def drive(self): print(&#39;주행중입니다&#39;) . sss . car1 = Car() car2 = Car() #car1 - 흰색 BMT 3 car1.brand = &#39;BMW&#39; car1.model = &#39;3&#39; car1.color = &#39;white&#39; #car2 - 블랙 audi A5 car2.brand = &#39;audi&#39; car2.model = &#39;A5&#39; car2.color = &#39;black&#39; . car1.turn_on() car2.turn_on() . &#44061;&#52404;&#47484; &#49373;&#49457;&#49884; &#49549;&#49457; &#52488;&#44592;&#54868; . class Car: def __init__(self,brand,model,color): self.brand = brand self.model = model self.color = color print(brand,model,color,&#39;생성&#39;) def turn_on(self): print(&#39;시동을 겁니다&#39;) def turn_off(self): print(&#39;시동을 끕니다&#39;) def drive(self): print(&#39;주행중입니다&#39;) . car1 = Car(&#39;BMT&#39;,&#39;3&#39;,&#39;white&#39;) car2 = Car(&#39;audi&#39;,&#39;A5&#39;,&#39;black&#39;) . &#47588;&#49548;&#46300;&#50640;&#49436; &#49549;&#49457; &#49324;&#50857;&#54616;&#44592; . class Car: def __init__(self,brand,model,color): self.brand = brand self.model = model self.color = color print(brand,model,color,&#39;생성&#39;) def turn_on(self): print(f&#39;{self.brand} {self.model} 시동을 겁니다&#39;) def turn_off(self): print(f&#39;{self.brand} {self.model} 시동을 끕니다&#39;) def drive(self): print(f&#39;{self.brand} {self.model} 주행중입니다&#39;) . car1 = Car(&#39;BMT&#39;,&#39;3&#39;,&#39;white&#39;) car2 = Car(&#39;audi&#39;,&#39;A5&#39;,&#39;black&#39;) # car1,car2 기능 수행 car1.turn_on() car1.drive() car1.turn_off() car2.turn_on() car2.drive() car2.turn_off() . Person &#53364;&#47000;&#49828; &#47564;&#46308;&#44592; . class Person: def __init__(self, name, age, address): self.hello = &#39;안녕하세요&#39; self.name = name self.age = age self.address = address def greeting(self): print(f&#39;{self.hello} 저는 {self.name} 입니다&#39;) p1 = Person(&#39;전승혜&#39;, 25, &#39;서울&#39;) p2 = Person(&#39;신효식&#39;, 30, &#39;서울&#39;) p1.greeting() p2.greeting() print(&#39;이름: &#39;,p1.name) print(&#39;나이: &#39;,p1.age) print(&#39;주소: &#39;,p1.address) print(&#39;이름:&#39;, p2.name) print(&#39;나이:&#39;, p2.age) print(&#39;주소: &#39;,p1.address) . class Book: def __init__(self, bookName): self.name = bookName print(&quot;객체가 생성되었습니다. 책의 이름은 &quot; + bookName + &quot;입니다.&quot;) def __del__(self): print(self.name + &quot; 객체가 소멸합니다.&quot;) book1 = Book(&quot;DT 파이썬&quot;) del book1 . &#51452;&#49324;&#50948; &#44172;&#51076; . import random # 초기 변수값 - 내 주사위 위치 ,컴퓨터 주사위 위치 # 주사위말 함수 - 30까지 주사위 위치 표현 # 시작시 출력화면 구성 - 게임 스타트 while True: input(&quot;Enter를 누르면 여러분의 말이 움직입니다&quot;) # 내 주사위수 계산 ,승패 체크 input(&quot;Enter를 누르면 컴퓨터의 말이 움직입니다&quot;) # 컴푸터 주사위 수 계산,승패 체크 . import random pl_pos = 1 com_pos = 1 def board(): print(&quot;-&quot; * (pl_pos - 1) + &quot;Ｐ&quot; + &quot;-&quot; * (30 - pl_pos) + &quot;Goal&quot;) print(&quot;-&quot; * (com_pos - 1) + &quot;Ｃ&quot; + &quot;-&quot; * (30 - com_pos) + &quot;Goal&quot;) board() print(&quot;주사위 게임, 스타트!&quot;) . import random pl_pos = 1 com_pos = 1 def board(): print(&quot;-&quot; * (pl_pos - 1) + &quot;Ｐ&quot; + &quot;-&quot; * (30 - pl_pos) + &quot;Goal&quot;) print(&quot;-&quot; * (com_pos - 1) + &quot;Ｃ&quot; + &quot;-&quot; * (30 - com_pos) + &quot;Goal&quot;) board() print(&quot;주사위 게임, 스타트!&quot;) while True: input(&quot;Enter를 누르면 여러분의 말이 움직입니다&quot;) pl_pos = pl_pos + random.randint(1, 6) if pl_pos &gt; 30: pl_pos = 30 board() if pl_pos == 30: print(&quot;당신이 승리했습니다！&quot;) break input(&quot;Enter를 누르면 컴퓨터의 말이 움직입니다&quot;) com_pos = com_pos + random.randint(1, 6) if com_pos &gt; 30: com_pos = 30 board() if com_pos == 30: print(&quot;컴퓨터가 승리했습니다!&quot;) break . import random # 초기 변수값 - 내 주사위 위치 ,컴퓨터 주사위 위치 pl_pos = 1 com_pos = 1 items_game = [&#39;마법신발&#39;, &#39;바나나&#39;, &#39;더블&#39;] def board(): print(&quot;-&quot; * (pl_pos - 1) + &quot;Ｐ&quot; + &quot;-&quot; * (30 - pl_pos) + &quot;Goal&quot;) print(&quot;-&quot; * (com_pos - 1) + &quot;Ｃ&quot; + &quot;-&quot; * (30 - com_pos) + &quot;Goal&quot;) board() print(&quot;주사위 게임, 스타트!&quot;) while True: pl_item=&#39;&#39; pl_turn = input(&quot;Enter를 누르면 여러분의 말이 움직입니다&quot;) if pl_turn ==&#39;&#39;: pl_pos = pl_pos + random.randint(1, 6) elif pl_turn == &#39;아이템&#39;: pl_item = random.choice(items_game) print(pl_item) if pl_item == &#39;마법신발&#39;: pl_pos = pl_pos + 10 elif pl_item == &#39;바나나&#39;: com_pos = com_pos - 5 elif pl_item == &#39;더블&#39;: pl_pos = pl_pos + 2*random.randint(1, 6) if pl_pos &gt; 30: pl_pos = 30 board() if pl_pos == 30: print(&quot;당신이 승리했습니다！&quot;) break input(&quot;Enter를 누르면 컴퓨터의 말이 움직입니다&quot;) com_pos = com_pos + random.randint(1, 6) if com_pos &gt; 30: com_pos = 30 board() if com_pos == 30: print(&quot;컴퓨터가 승리했습니다!&quot;) break .",
            "url": "https://seunghye97.github.io/study_hye/2021/06/08/3%ED%8C%80_%EC%A0%84%EC%8A%B9%ED%98%9C.html",
            "relUrl": "/2021/06/08/3%ED%8C%80_%EC%A0%84%EC%8A%B9%ED%98%9C.html",
            "date": " • Jun 8, 2021"
        }
        
    
  
    
        ,"post1": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://seunghye97.github.io/study_hye/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://seunghye97.github.io/study_hye/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://seunghye97.github.io/study_hye/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://seunghye97.github.io/study_hye/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}